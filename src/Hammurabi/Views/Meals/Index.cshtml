@*@model IEnumerable<Hammurabi.Models.Meal>*@
@model PaginatedList<Hammurabi.Models.Meal>

@{
    ViewData["Title"] = "Index";
}
<style>
    body {
        @*Add background for this site - image - not necessary, i replace it by place this background in _layout shared cshtml file*@ 
        @*background: url('@Url.Content("~/images/meal.jpg")'); *@;
    }
    .table{
      @*Add background color(gray) and opacity 50% for table*@
      background-color:rgba(194,194,194,0.5);    
    }
</style>

<h2>Index</h2>


<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            Find by name: <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-default" /> |
            <a asp-action="Index">Back to List</a>
        </p>
    </div>
</form>

<table class="table">
    <thead>
        <tr>
            <th>
                @*@Html.DisplayNameFor(model => model.Name)*@
                Name
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.MealIngredients)*@
                @Html.DisplayName("Ingredients List:")
            </th>
            <th>
                @*version without paging functionality*@
                @*<a asp-action="Index" asp-route-sortOrder="@ViewBag.TimeSortParm">@Html.DisplayNameFor(model => model.PreparationTime) (min)</a>*@

                @*version with paging functionality*@
                <a asp-action="Index" asp-route-sortOrder="@ViewData["TimeSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Preparation Time</a>
                @*@Html.DisplayNameFor(model => model.PreparationTime)*@
            </th>
            <th>
                @*version without paging functionality*@
                @*<a asp-action="Index" asp-route-sortOrder="@ViewBag.PriceSortParm">@Html.DisplayNameFor(model => model.Price) ($)</a>*@

                @*version with paging functionality*@
                <a asp-action="Index" asp-route-sortOrder="@ViewData["PriceSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]">Price</a>
                @*@Html.DisplayNameFor(model => model.Price)*@
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                <table class="table2">
                    @*Code for display each item of Ingredient list for each Meal. Ingredients are order by IngredientID.*@
                    @foreach (var item2 in item.MealIngredients.OrderBy(a => a.IngredientID))
                         {
                            <tr>
                                <td>
                                    @Html.DisplayFor( modelItem => item2.Ingredient.Name)
                                </td>
                            </tr>
                        }
                </table>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PreparationTime)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                <a asp-action="Details" asp-route-id="@item.ID">Details</a> |
            </td>
        </tr>
}
    </tbody>
</table>

@*added for paging functionality*@
@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled btn">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-page="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled btn">
    Next
</a>
